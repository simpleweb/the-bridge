/* eslint no-sync:0, no-unused-vars:0 */
'use strict';

// Requires

var ambi = require('ambi');
var eachr = require('eachr');
var typeChecker = require('typechecker');

// Define
module.exports = {
	// Parse an env file asynchronously
	// next(err,obj)
	parseFile: function parseFile(filePath, next) {
		var _this = this;

		// Read
		require('fs').readFile(filePath, function (err, data) {
			// Check
			if (err) return next(err); // exit

			// Parse
			_this.parse(data.toString(), next);
		});

		// Chain
		return this;
	},


	// Parse an env file synchronously
	parseFileSync: function parseFileSync(filePath) {
		// Read
		var data = require('fs').readFileSync(filePath);

		// Check the result
		if (typeChecker.isError(data)) {
			// An error occured
			return data;
		} else {
			// Parse the result
			return this.parseSync(data.toString());
		}
	},


	// Parse an envfile string
	// next(err,obj)
	parse: function parse(src, next) {
		var _this2 = this;

		// Call the synchronous method asynchronously and avoid zalgo by wrapping in nextTick
		process.nextTick(function () {
			ambi(_this2.parseSync, src, next);
		});

		// Chain
		return this;
	},


	// Parse an envfile string synchronously
	parseSync: function parseSync(src) {
		// Try parse JSON
		try {
			return JSON.parse(src.toString());
		}

		// Try parse envfile string
		catch (err) {
			var result = {};
			var lines = src.toString().split('\n');
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var line = _step.value;

					var match = line.match(/^([^=:#]+?)[=:](.*)/);
					if (match) {
						var key = match[1].trim();
						var value = match[2].trim();
						result[key] = value;
					}
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			return result;
		}
	},


	// Turn an object into envfile string
	// next(err,str)
	stringify: function stringify(obj, next) {
		var _this3 = this;

		// Call the synchronous method asynchronously and avoid zalgo by wrapping in nextTick
		process.nextTick(function () {
			ambi(_this3.stringifySync, obj, next);
		});

		// Chain
		return this;
	},


	// Turn an object into an envfile synchronously
	stringifySync: function stringifySync(obj) {
		// Prepare
		var result = '';

		// Stringify
		eachr(obj, function (value, key) {
			if (key) {
				var line = key + '=' + String(value);
				result += line + '\n';
			}
		});

		// Return
		return result;
	}
};